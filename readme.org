#+TITLE: Emacs
[[./screenshot.png]]
* Emacs
:PROPERTIES:
:header-args:emacs-lisp :lexical t :results silent
:END:
** Install
*** Emacs
I'm using the [[https://github.com/d12frosted/homebrew-emacs-plus][Homebrew Emacs Plus]] package in homebrew. You can install it with

#+begin_src sh :tangle no
brew tap d12frosted/emacs-plus
brew install emacs-plus
#+end_src
*** Doom
**** Dependencies
First, doom dependencies
#+begin_src sh :tangle no
# required dependencies
brew install git ripgrep
# optional dependencies
brew install coreutils fd
# Installs clang
xcode-select --install

# Install shellcheck
brew install shellcheck

# Install fd for faster searches
brew install fd
#+end_src

**** Install
#+begin_src sh :tangle no
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
~/.emacs.d/bin/doom install
#+end_src
** Configuring Emacs
I'm using the literate configuration mode. This can be enabled by uncommenting ~literate~ in ~init.el~. I'm changing where the default configuration file is stored by adding the following to the top of my ~init.el~.

#+begin_src emacs-lisp :tangle no
(setq +literate-config-file "~/Documents/areas/emacs/readme.org")
#+end_src
*** Identity
 Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.

 #+begin_src emacs-lisp
(setq user-full-name "Jeff Boek"
      user-mail-address "j@jboek.com")
#+end_src
*** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-nord-light)
#+end_src
*** Font
#+begin_src  emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 14)
      doom-variable-pitch-font (font-spec :family "Fira Code" :size 15))
#+end_src
*** Org
First lets setup the files that we want to search from
#+begin_src emacs-lisp
(setq org-directory "~/Documents/")
#+end_src

I wan't to be able to scan all org files, but only a few levels deep. For example this will match =~/Documents/Projects/ABC/readme.org= but not =~/Documents/Projects/ABC/node_modules/package/this_is_hilarious/readme.org=.

#+begin_src emacs-lisp
(setq org-agenda-files
      (split-string
       (shell-command-to-string
        "find ~/Documents -mindepth 1 -maxdepth 4 -type f -name '*.org'")
       "\n" t))
#+end_src

When refiling I was running into problems as I have multiple files named =readme.org= so it would only use the first one that it found. We can fix this with

#+begin_src emacs-lisp
(setq org-refile-use-outline-path 'title)
#+end_src
** Projects
Using emacs for project management.

Let's add a few projects:

#+begin_src emacs-lisp
(projectile-add-known-project "~/Documents/Areas/emacs")
(projectile-add-known-project "~/Documents/Areas/oreo")
#+end_src
